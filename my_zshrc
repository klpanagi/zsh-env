# Check if zplug is installed
if [[ ! -d ~/.zplug ]]; then
    git clone https://github.com/zplug/zplug ~/.zplug
    source ~/.zplug/init.zsh && zplug update --self
fi
source $HOME/.zplug/init.zsh

## Bundles {
  zplug "plugins/command-not-found", from:oh-my-zsh
  zplug "plugins/z", from:oh-my-zsh
  zplug "plugins/git", from:oh-my-zsh
  zplug "plugins/colorize", from:oh-my-zsh
  zplug "plugins/pip", from:oh-my-zsh
  zplug "plugins/cp", from:oh-my-zsh
  zplug "plugins/colored-man-pages", from:oh-my-zsh

  zplug "zsh-users/zsh-syntax-highlighting", defer:2
  zplug "zsh-users/zsh-completions", defer:2
  zplug "zsh-users/zsh-history-substring-search", defer:2
  zplug "zsh-users/zsh-autosuggestions", defer:2

  #antigen bundle ssh-agent
  zplug "plugins/copydir", from:oh-my-zsh
  zplug "plugins/copyfile", from:oh-my-zsh
  zplug "supercrabtree/k", from:oh-my-zsh
# }

## Theme {
setopt prompt_subst
  #zplug "adambiggs/zsh-theme", use:adambiggs.zsh-theme
zplug "caiogondim/bullet-train-oh-my-zsh-theme", \
    use:"bullet-train.zsh-theme", \
    as:theme
  #antigen theme russjohnson/angry-fly-zsh angry-fly
  #antigen theme denysdovhan/spaceship-zsh-theme spaceship
  #antigen bundle yardnsm/blox-zsh-theme
  #antigen theme InAnimaTe/darkblood-modular darkblood-modular
  #antigen theme oskarkrawczyk/honukai-iterm-zsh honukai
  #antigen theme tonyseek/oh-my-zsh-seeker-theme seeker
# }

if ! zplug check --verbose; then
    printf "Install zsh plugin? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# Then, source plugins and add commands to $PATH
zplug load --verbose

zmodload zsh/terminfo
## zsh-history-substring-search {
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

## VI mode
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down]]]]
## }

## zsh-autosuggestions --{
bindkey '^ ' autosuggest-execute
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=39"
## --}

export BROWSER="firefox"

## Compiler
export CC=/usr/bin/gcc
export CXX=/usr/bin/g++

# Locale
export LANG=en_US.UTF-8

export TERM="xterm-256color"
export TERMINAL="terminator"

# If not tmux session
#[[ $TMUX = "" ]] && export TERM="rxvt-unicode"

CASE_SENSITIVE="true"
# HYPHEN_INSENSITIVE="true"
DISABLE_AUTO_UPDATE="true"
# export UPDATE_ZSH_DAYS=13
# DISABLE_LS_COLORS="true"
DISABLE_AUTO_TITLE="true"
ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="true"
# DISABLE_UNTRACKED_FILES_DIRTY="true"
HIST_STAMPS="mm/dd/yyyy"

if [ -d "$HOME/.local/bin" ]; then
  PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "$HOME/.local/lib" ]; then
  LD_LIBRARY_PATH="$HOME/.local/lib:$LD_LIBRARY_PATH"
fi

export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib/pkgconfig

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
else
    export EDITOR='gvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/id_rsa"

# Bullettrain Theme ----------{
BULLETTRAIN_PROMPT_ORDER=(
  status
  cmd_exec_time
  git
  context
  dir
  virtualenv
)
  # Prompt
BULLETTRAIN_PROMPT_ROOT=true
BULLETTRAIN_PROMPT_CHAR="âž” "
BULLETTRAIN_PROMPT_SEPARATE_LINE=true
BULLETTRAIN_PROMPT_ADD_NEWLINE=true

# Status
BULLETTRAIN_STATUS_BG="green"
BULLETTRAIN_STATUS_ERROR_BG="red"
BULLETTRAIN_STATUS_FG="white"

# Context
BULLETTRAIN_IS_SSH_CLIENT=true
BULLETTRAIN_CONTEXT_BG="black"
BULLETTRAIN_CONTEXT_FG="yellow"
BULLETTRAIN_CONTEXT_DEFAULT_USER="klpanagi"

# Dir
BULLETTRAIN_DIR_BG="black"
BULLETTRAIN_DIR_FG="yellow"
BULLETTRAIN_DIR_CONTEXT_SHOW=false
BULLETTRAIN_DIR_EXTENDED=1

# Git
BULLETTRAIN_GIT_BG="black"
BULLETTRAIN_GIT_FG="white"
BULLETTRAIN_GIT_COLORIZE_DIRTY=true
BULLETTRAIN_GIT_COLORIZE_DIRTY_BG_COLOR="black"
BULLETTRAIN_GIT_COLORIZE_DIRTY_FG_COLOR="cyan"

# Command execution
BULLETTRAIN_EXEC_TIME_BG="blue"
BULLETTRAIN_EXEC_TIME_FG="white"
BULLETTRAIN_EXEC_TIME_ELAPSED=20

# Python virtualenv
BULLETTRAIN_VIRTUALENV_BG="yellow"
BULLETTRAIN_VIRTUALENV_FG="black"
BULLETTRAIN_VIRTUALENV_PREFIX="pyenv"
# ----------}

### Tmux {
ZSH_TMUX_AUTOSTART=false
ZSH_TMUX_AUTOCONNECT=true
ZSH_TMUX_FIXTERM_WITH_256COLOR=true
# }

### Aliases {
if [ -d "~/.zsh_aliases" ]; then
    source ~/.zsh_aliases
fi
# }

# ROS {
if [ -d "/opt/ros/indigo" ]; then
    source /opt/ros/indigo/setup.zsh --extend
fi
# }

# RAPP-Platform {
if [ -d "${HOME}/rapp_platform" ]; then
    source ${HOME}/rapp_platform/rapp_platform_setup.zsh
fi
# }

# vim-mode
#bindkey -v

# export PYTHONPATH=$PYTHONPATH:${HOME}/Desktop/Diploma-Thesis/ai-playground/deep-learning/lib

## FZF plugin ----------{
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_COMPLETION_TRIGGER=',,' # Trigger Sequence (,,<TAB>)
FZH_TMUX_HEIGHT=40 # Control fzf pane height
# ----------}

export WORKON_HOME=~/.virtuanenvs
source /usr/local/bin/virtualenvwrapper.sh
source /usr/local/bin/activate.sh
